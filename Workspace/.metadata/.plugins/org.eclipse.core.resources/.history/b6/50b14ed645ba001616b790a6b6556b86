import java.util.ArrayList;

public class CosinusTransformator {

	private float N = 8;
	private float u = 0;
	private float v = 0;
	private ArrayList<ArrayList<ColorValues>> blockColorMatrix;
	
	
	public ArrayList<ArrayList<ColorValues>> getBlockColorValue() {
		return blockColorMatrix;
	}


	public void setBlockColorMatrix(ArrayList<ArrayList<ColorValues>> blockColorMatrix) {
		this.blockColorMatrix = blockColorMatrix;
	}


	public float getN() {
		return N;
	}


	public void setN(float n) {
		N = n;
	}


	public float getU() {
		return u;
	}


	public void setU(float u) {
		this.u = u;
	}


	public float getV() {
		return v;
	}


	public void setV(float v) {
		this.v = v;
	}


	public ArrayList<ArrayList<ColorValues>> getValue() {
		
		float alphaU = 0;
		float alphaV = 0;
		float result = 0;
		String[] colorTypes = {"Y", "Cb", "Ca"};
		float colorValueFloat = 0;
		ArrayList<ArrayList<ColorValues>> matrix = new ArrayList<ArrayList<ColorValues>>();
		
		if (this.u == 0) {
			alphaU = (float) Math.sqrt(1.0/this.N);
		} else {
			alphaU = (float) Math.sqrt(2.0/this.N);
		}
		
		if (this.v == 0) {
			alphaV = (float) Math.sqrt(1.0/this.N);
		} else {
			alphaV = (float) Math.sqrt(2.0/this.N);
		}
			
		// iterate over matrix line by line
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				
				// build sum
				for (int y = 0; y <= this.N-1; y++) {
					for (int x = 0; x <= this.N-1; x++) {
						
						// get each colorType
						for (int c = 0; c < 3; c++) {
							switch(colorTypes[c]) {
							case "Y":
								colorValueFloat = (float) this.blockColorMatrix.get(y).get(x).getY();
								break;
							case "Cb":
								colorValueFloat = (float) this.blockColorMatrix.get(y).get(x).getCb();
								break;
							case "Ca":
								colorValueFloat = (float) this.blockColorMatrix.get(y).get(x).getCa();
								break;
							}
							
							result += colorValueFloat * (Math.cos( (Math.PI * (2.0*y+1) * this.u)/(2.0*this.N) ) ) * (Math.cos( (Math.PI * (2.0*x+1) * this.v)/(2.0*this.N) ));
						}
					}
					
				}
				
				result *= alphaU * alphaV;
				
				// for first new colorset, add new list/matrix entry
				if (j == 0) {
					ArrayList<ColorValues> firstValue = new ArrayList<ColorValues>();
					firstValue.add(new ColorValues(currentRGB[0],currentRGB[1],currentRGB[2], valueType.YCaCb));
					colorMatrix.add(firstColor);
				} else {
					colorMatrix.get(y).add(new ColorValues(currentRGB[0],currentRGB[1],currentRGB[2], valueType.YCaCb));
				}
				
			}
		}
			
		
		return result;
	}
	
}
